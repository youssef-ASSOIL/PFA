manager can add employees remove them or modify them 
manager can add a company to implement the services
manager can add the service remove or modify
manager can add employee to implement the service

 
{"_id","date","Domaine",
"NomClient","PrenomClient","NomEntreprise","idIntervention"
,"idcontact","idFacture","idCompte"}

{"_id"
,"certificat","nom","prenom",
"id_contact","typeEmployee"}

{"_id","idadress",
"fax","mail","fix","phone"}

{"_id","numero",
,"region","rue","ville"}




import 'package:flutter/material.dart';
import 'package:mongo_dart/mongo_dart.dart' as mongo;

const String MONGO_CONN_URL =
    "mongodb+srv://PFAY2Ai:MvqdYN84OGYYtO8D@pfa.clt7gyd.mongodb.net/WasteToxique?retryWrites=true&w=majority";

class Adresse {
  final String id;
  final String numero;
  final String region;
  final String rue;
  final String ville;

  Adresse({
    required this.id,
    required this.numero,
    required this.region,
    required this.rue,
    required this.ville,
  });

  Map<String, dynamic> toJson() {
    return {
      '_id': id,
      'numero': numero,
      'region': region,
      'rue': rue,
      'ville': ville,
    };
  }
}

class AddEmployeePage extends StatefulWidget {
  const AddEmployeePage({Key? key}) : super(key: key);

  @override
  State<AddEmployeePage> createState() => _AddEmployeePageState();
}

class _AddEmployeePageState extends State<AddEmployeePage> {
  TextEditingController idController = TextEditingController();
  TextEditingController numeroController = TextEditingController();
  TextEditingController regionController = TextEditingController();
  TextEditingController rueController = TextEditingController();
  TextEditingController villeController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add Employee'),
      ),
      body: Container(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: idController,
              decoration: InputDecoration(labelText: 'ID'),
            ),
            TextField(
              controller: numeroController,
              decoration: InputDecoration(labelText: 'Numero'),
            ),
            TextField(
              controller: regionController,
              decoration: InputDecoration(labelText: 'Region'),
            ),
            TextField(
              controller: rueController,
              decoration: InputDecoration(labelText: 'Rue'),
            ),
            TextField(
              controller: villeController,
              decoration: InputDecoration(labelText: 'Ville'),
            ),
            ElevatedButton(
              onPressed: () {
                addAdresseToDatabase();
              },
              child: Text('Add Adresse to MongoDB'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> addAdresseToDatabase() async {
    final id = idController.text;
    final adresse = Adresse(
      id: id,
      numero: numeroController.text,
      region: regionController.text,
      rue: rueController.text,
      ville: villeController.text,
    );

    final db = await mongo.Db.create(MONGO_CONN_URL);
    await db.open();
    final collection = db.collection('Adresse');
    
    final existingDocument = await collection.findOne(mongo.where.eq('_id', id));
    if (existingDocument != null) {
      // Document with the given ID already exists
      print('Document with ID $id already exists in the database.');
    } else {
      await collection.insert(adresse.toJson());
      print('Address added to MongoDB successfully.');
    }

    await db.close();

    // Clear text fields after adding to the database
    idController.clear();
    numeroController.clear();
    regionController.clear();
    rueController.clear();
    villeController.clear();
  }
}
